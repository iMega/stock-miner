# go run github.com/99designs/gqlgen generate
type Query {
    user: User!
    stockItemApproved: [StockItem]
    memStats: MemStats!
    globalMiningStatus: Boolean!
    marketStockItems: [StockItem]
    settings: Settings!
    slots: [Slot]
    dealings: [Deal]
    users: [User!]!
}

type Mutation {
    addStockItemApproved(items: [StockItemInput!]!): Boolean!
    removeStockItemApproved(items: [StockItemInput!]!): Boolean!
    updateStockItemApproved(items: [StockItemInput!]!): Boolean!
    enableStockItemsApproved: Boolean!
    disableStockItemsApproved: Boolean!

    # settings
    marketCredentials(creds: MarketCredentialsInput!): Boolean!
    slot(global: SlotSettingsInput!): Boolean!
    rulePrice(global: RulePriceInput!): Boolean!

    globalMiningStop: Boolean!
    globalMiningStart: Boolean!

    createUser(user: UserInput!): Boolean!
    removeUser(user: UserInput!): Boolean!
}

type Subscription {
    memStats: MemStats!
}

type User {
    email: ID!
    name: String
    avatar: String
}

type StockItem {
    ticker: String!
    figi: String!

    isin: String
    minPriceIncrement: Float
    lot: Int
    currency: String
    name: String

    amountLimit: Float!
    transactionLimit: Int!

    startTime: Int!
    endTime: Int!
}

input StockItemInput {
    ticker: String!
    figi: String!
    amountLimit: Float!
    transactionLimit: Int!
    currency: String!
    startTime: Int!
    endTime: Int!
}

type MemStats {
    alloc: String!
    totalAlloc: String!
    sys: String!
}

# User settings
type Settings {
    slot: SlotSettings
    marketCredentials: [MarketCredentials]
    marketProvider: String!
    marketCommission: Float
    grossMargin: Float
    miningStatus: Boolean!
}

type SlotSettings {
    volume: Int!
    modificatorMinPrice: Float
}

type MarketCredentials {
    name: String!
    token: String!
    apiUrl: String!
}

input MarketCredentialsInput {
    name: String!
    apiUrl: String!
    token: String!
}

input SlotSettingsInput {
    volume: Int!
    modificatorMinPrice: Float
}

input RulePriceInput {
    marketCommission: Float
    grossMargin: Float
}

type Slot {
    id: String!
    ticker: String!
    figi: String!

    startPrice: Float!
    changePrice: Float!
    buyingPrice: Float
    targetPrice: Float
    profit: Float

    qty: Int
    amountSpent: Float
    targetAmount: Float
    totalProfit: Float

    currency: String!
    currentPrice: Float!
}

type Deal {
    id: String!
    ticker: String!
    figi: String!

    startPrice: Float!
    changePrice: Float!
    buyingPrice: Float
    targetPrice: Float
    profit: Float

    salePrice: Float
    qty: Int
    amountSpent: Float

    amountIncome: Float
    totalProfit: Float

    buyAt: String
    duration: Int
    sellAt: String

    currency: String!
}

input UserInput {
    email: ID!
    name: String
    avatar: String
}
